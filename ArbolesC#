using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Arboles
{
    class Nodo
    {
        public string data { get; set; }
        public Nodo left { get; set; }
        public Nodo right { get; set; }

        public Nodo()
        {
            this.data = "";
            this.left = null;
            this.right = null;
        }

        public void push(Nodo raiz)
        {            
            Nodo nuevoNodo = new Nodo();
            Console.Write("Ingresar nuevo nodo: ");
            nuevoNodo.data = Console.ReadLine();
            string nodoIzq = "";
            string nodoDer = "";
            

            Nodo apuntador = raiz;
            int direcc = 0;

            while (direcc != 4)
            {
                if (apuntador.left == null)
                    nodoIzq = "";
                else
                    nodoIzq = apuntador.left.data;

                if (apuntador.right == null)
                    nodoDer = "";
                else
                    nodoDer = apuntador.right.data;

                Console.Write("\t\t\t({0}) <- ({1}) -> ({2})\n\t\t\t\t1)Izquierda\n\t\t\t\t2)Derecha\n\t\t\t\t3)Regresar a la raiz\t", nodoIzq,apuntador.data,nodoDer);
                direcc = Convert.ToInt16(Console.ReadLine());
                switch (direcc)
                {
                    case 1:
                        if (apuntador.left != null)
                            apuntador = apuntador.left;
                        else
                        {
                            apuntador.left = nuevoNodo;
                            direcc = 4;
                            Console.WriteLine("\t\tHa sido ingresado a la izquierda: {0}\n", nuevoNodo.data);
                        }
                            break;
                    case 2:
                        if (apuntador.right != null)
                            apuntador = apuntador.right;
                        else
                        {
                            apuntador.right = nuevoNodo;
                            direcc = 4;
                            Console.WriteLine("\t\tHa sido ingresado a la derecha: {0}\n", nuevoNodo.data);
                        }
                        break;
                    case 3:
                        apuntador = raiz;
                        break;
                    default:
                        Console.WriteLine("Ingresa opcion valida.\n");
                        break;
                }
            }

        }

        public void inorden(Nodo nodoActual)
        {
            if (nodoActual != null)
            {
                inorden(nodoActual.left);
                Console.Write("({0})",nodoActual.data);
                inorden(nodoActual.right);
            }
        }

        public void preorden(Nodo nodoActual)
        {
            if (nodoActual != null)
            {
                Console.Write("({0})", nodoActual.data);
                preorden(nodoActual.left);                
                preorden(nodoActual.right);
            }
        }

        public void postorden(Nodo nodoActual)
        {
            if (nodoActual != null)
            {
                postorden(nodoActual.left);
                postorden(nodoActual.right);
                Console.Write("({0})", nodoActual.data);
                
            }
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            int opcion = 0;
            Nodo raiz = new Nodo();
            Console.Write("Ingresa la raiz: ");
            raiz.data = Console.ReadLine();

            while (opcion != 5)
            {
                Console.Write("\nMENU:\n\t1)Agregar Nodo\n\t2)Recorrido Inorden\n\t3)Recorrido preorden\n\t4)Recorrido postorden\n\t5)Salir\t  ");
                opcion = Convert.ToInt16(Console.ReadLine());
                switch(opcion)
                {
                    case 1:
                        raiz.push(raiz);
                        break;
                    case 2:
                        raiz.inorden(raiz);
                        break;
                    case 3:
                        raiz.preorden(raiz);
                        break;
                    case 4:
                        raiz.postorden(raiz);
                        break;
                    case 5:
                        Console.WriteLine("Goodbye:3");
                        break;
                    default:
                        Console.WriteLine("Opcion invalida");
                        break;
                }
            }
        }
    }
}
